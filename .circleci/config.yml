version: 2
jobs:
  build:
    #docker:
    #  - image: docker:17.05.0-ce-git
    machine:
      enabled: true


    # working_directory: /build

    steps:
      - checkout

      # - run: |
      #     apk add --no-cache make jq

      - run:
          name: Build
          command: make build

      - run:
          name: Test
          command: make test

      - deploy:
          name: Deploy if tagged
          command: |
            # if [ ! -z "$CIRCLE_TAG" ]; then
            if [[ "${CIRCLE_TAG}" =~ ^v([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
              version=${BASH_REMATCH[1]}
              cat artifact
            fi

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/
#version: 2
#jobs:
#  build:
#    working_directory: /app
#    docker:
#      - image: docker:17.05.0-ce-git
#    steps:
#      - checkout
#      - setup_remote_docker
#      - run:
#          name: Install dependencies
#          command: |
#            apk add --no-cache \
#              py-pip=9.0.0-r1
#            pip install \
#              docker-compose==1.12.0 \
#              awscli==1.11.76
#      - restore_cache:
#          keys:
#            - v1-{{ .Branch }}
#          paths:
#            - /caches/app.tar
#      - run:
#          name: Load Docker image layer cache
#          command: |
#            set +o pipefail
#            docker load -i /caches/app.tar | true
#      - run:
#          name: Build application Docker image
#          command: |
#            docker build --cache-from=app -t app .
#      - run:
#          name: Save Docker image layer cache
#          command: |
#            mkdir -p /caches
#            docker save -o /caches/app.tar app
#      - save_cache:
#          key: v1-{{ .Branch }}-{{ epoch }}
#          paths:
#            - /caches/app.tar
#      - run:
#          name: Run tests
#          command: |
#            docker-compose -f ./docker-compose.test.yml up
#      - deploy:
#          name: Push application Docker image
#          command: |
#            if [ "${CIRCLE_BRANCH}" == "master" ]; then
#              login="$(aws ecr get-login)"
#              ${login}
#              docker tag app "${ECR_ENDPOINT}/app:${CIRCLE_SHA1}"
#              docker push "${ECR_ENDPOINT}/app:${CIRCLE_SHA1}"
#            fi
